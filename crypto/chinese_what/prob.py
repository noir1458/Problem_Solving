from Crypto.Util.number import bytes_to_long, getPrime


flag = bytes_to_long(b'DH{???????????????????????????????????????????????????????}')

# p1 = getPrime(420)
# p2 = getPrime(420)
# p3 = getPrime(420)

p1 = 1527207470243143973741530105910986024271649986608148657294882537828034327858594844987775446712917007186537829119357070864918869
p2 = 2019864244456120206428956645997068464122219855220655920467990311571156191223237121636244541173449544034684177250532278907347407
p3 = 1801109020443617827324680638861937237596639325730371475055693399143628803572030079812427637295108153858392360647248339418361407
c1 = 232762450308730030838415167305062079887914561751502831059133765333100914083329837666753704309116795944107100966648563183291808
c2 = 869189375217585206857269997483379374418043159436598804873841035147176525138665409890054486560412505207030359232633223629185304
c3 = 1465704473460472286244828683610388110862719231828602162838215555887249333131331510519650513265133531691347657992103108331793683


print(f'p1 = {p1}')
print(f'p2 = {p2}')
print(f'p3 = {p3}')
print(f'c1 = {flag % p1}')
print(f'c2 = {flag % p2}')
print(f'c3 = {flag % p3}')

def xgcd(a,b):
    if b==0:
        # a = g = a * 1 + b * 0
        return a,1,0
    g,x1,y1 = xgcd(b,a%b)
    x=y1
    y=(g-a*x)//b
    assert x*a + y*b == g
    return g,x,y

def crt(a,b,p,q):
    g,inv_p,inv_q=xgcd(p,q)
    assert g==1
    c=a*q*inv_q + b*p*inv_p
    final_mod = p*q
    c %= final_mod
    assert c%p==a
    assert c%q==b
    return c,final_mod

def crt_multi(rem,mod):
    c = 0
    final_mod = 1
    for a,p in zip(rem,mod):
        c,final_mod = crt(a,c,p,final_mod)
    for a,p in zip(rem,mod):
        assert c%p == a
    return c, final_mod

if __name__=="__main__":
    print('----')
    X = crt_multi([c1,c2,c3],[p1,p2,p3])[0]
    print(bytes_to_long(X))